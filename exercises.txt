#SPLITING CUSTOMER NAME COLUMN INTO ARRAY OF 2 ELEMENTS, SEPARATOR WHITESPACE

customersDF_name_split = customersDF.withColumn('name',split(customersDF.name,' ')
                                 )
display(customersDF_name_split)

#----------------------------------------------------------------------------------------------------------------------------------------------------------------

#SPLITING CUSTOMER NAME COLUMN INTO ARRAY, SEPARATOR COMMA

customersDF_name_split = customersDF.withColumn('name',split(customersDF.name,',')
                                 )
display(customersDF_name_split)

#----------------------------------------------------------------------------------------------------------------------------------------------------------------

#SPLIT CUSTOMER ADRESS COLUMN INTO ARRAY

customersDF_adress_split = customersDF_name_split.withColumn('adress',split(customersDF.adress,','))
display(customersDF_adress_split)

#----------------------------------------------------------------------------------------------------------------------------------------------------------------

# CUSTOMER DF WITH SEPARATED COLUMNS FOR ADDRESS & NAME

customersDF_updated = customersDF_adress_split.select(
                                  customersDF_adress_split.id,
                                  customersDF_adress_split.name.getItem(0).alias('FirstName'),
                                  customersDF_adress_split.name.getItem(1).alias('FamilyName'),
                                  customersDF_adress_split.adress.getItem(0).alias('City'),
                                  customersDF_adress_split.adress.getItem(1).alias('Street'),
                                  customersDF_adress_split.adress.getItem(2).alias('Street_Num'),
                                  customersDF_adress_split.adress.getItem(3).alias('Postcode'))
display(customersDF_updated)

#----------------------------------------------------------------------------------------------------------------------------------------------------------------

# JOINING CUSTOMERS & ORDERS & PRODUCT DF

ordersDF_customersDF_join = customersDF_updated.join(ordersDF,customersDF_updated.id==ordersDF.custid,'outer')

ordersDF_customersDF_productDF_join = ordersDF_customersDF_join.join(productsDF,ordersDF_customersDF_join.productid==productsDF.id,'outer')

display(ordersDF_customersDF_productDF_join)

#----------------------------------------------------------------------------------------------------------------------------------------------------------------

# FIXING THE DATE FORMAT FOR DATEOFDELIVERY COLUMN

ordersDF_customersDF_productDF_join.withColumn('dateofdelivery',to_date(col('dateofdelivery'),'MM-dd-yyyy')).show()

ordersDF_customersDF_productDF_join.printSchema()

#----------------------------------------------------------------------------------------------------------------------------------------------------------------

# FIND WHICH PRODUCTS ARE ORDERED THE MOST & WHICH THE LEAST

ordersDF_customersDF_productDF_join.groupBy('productid').count().withColumnRenamed('count','*times product ordered').show()

ordersDF_customersDF_productDF_join.select('name',productsDF.id).show()

#----------------------------------------------------------------------------------------------------------------------------------------------------------------

# DISPLAY CUSTOMERS WITH MORE THAN 1 ORDER
final_df.groupBy('FirstName').count().withColumnRenamed('count','orders').where('orders > 1').show()

display(final_df)

#S----------------------------------------------------------------------------------------------------------------------------------------------------------------

# CUSTOMERS THAT HAVE NOT PLACED ANY ORDERS
client_no_order = customersDF_updated.join(ordersDF,customersDF_updated.id==ordersDF.custid,'left')

client_no_order.select('FirstName','FamilyName').where('productid is Null').show()
# comment
#new stuff added for testing
#comment